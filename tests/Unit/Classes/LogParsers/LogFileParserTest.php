<?php
namespace tests\Unit\Classes\LogParsers;

use App\Classes\DateFormatter\ConvertToLaravelFormat;
use App\Classes\LogParsers\MicroserviceLogFileParser;
use App\Classes\Observers\Log\LogParserObserver;
use Tests\TestCase;

class LogFileParserTest extends TestCase
{
    private $parser;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $dateConverterMock = $this->createMock(ConvertToLaravelFormat::class);
        $dateConverterMock->method('convert')
            ->willReturn('2022-01-01 12:00:00');

        $this->parser = new MicroserviceLogFileParser($dateConverterMock);
    }

    /**
     * Test parsing a log file
     */
    public function testParse()
    {
        $dataObserverMock = \Mockery::mock(LogParserObserver::class)
            ->shouldReceive('update')
            ->once()
            ->with([
                [
                    'type' => 'microservice',
                    'service_name' => 'app',
                    'date_time' => '2022-03-01 09:00:00',
                    'http_method' => 'GET',
                    'http_path' => '/api/v1/test',
                    'http_version' => 'HTTP/1.1',
                    'http_status_code' => '200'
                ]
            ]);

        $this->parser->attach($dataObserverMock);
        $logFilePath = '/var/www/html/logs.txt';

        $result = $this->parser->parse($logFilePath);
        $this->assertEmpty($result);
    }

    /**
     * Test parsing a non-existent log file
     */
    public function testParseNonExistentFile()
    {
        $logFilePath = __DIR__ . '/non-existent.log';
        $result = $this->parser->parse($logFilePath);

        $this->assertEquals('Log file is not exist.', $result);
    }

}
