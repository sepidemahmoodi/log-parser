<?php
namespace tests\Unit\Classes\LogParsers;

use App\Classes\DateFormatter\ConvertToLaravelFormat;
use App\Classes\LogParsers\MicroserviceLogFileParser;
use App\Classes\Observers\Log\LogParserObserver;
use Tests\TestCase;

/**
 * @covers \App\Classes\LogParsers\MicroserviceLogFileParser
 * @uses \App\Classes\Observers\Log\LogStorageInDbObserver
 * @uses \App\Classes\Observers\Log\LogParserObserver
 */
class MicroserviceLogFileParserTest extends TestCase
{
    private $parser;
    private LogParserObserver $logStorageObserver;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $dateConverterMock = $this->createMock(ConvertToLaravelFormat::class);
        $dateConverterMock->method('convert')
            ->willReturn('2022-01-01 12:00:00');

        $this->parser = new MicroserviceLogFileParser($dateConverterMock);
    }

    /**
     * Test parsing a log file
     */
    public function testParse()
    {
        $this->logStorageObserver = new class implements LogParserObserver{
            public function update($data) {
                return true;
            }
        };
        $this->parser->attach($this->logStorageObserver);
        $logFilePath = '/var/www/html/logs.txt';

        $result = $this->parser->parse($logFilePath);
        $this->assertEquals('Parsing log file is complete', $result);
    }

    /**
     * Test parsing a non-existent log file
     */
    public function testParseNonExistentFile()
    {
        $logFilePath = __DIR__ . '/non-existent.log';
        $result = $this->parser->parse($logFilePath);

        $this->assertEquals('Log file is not exist.', $result);
    }

}
